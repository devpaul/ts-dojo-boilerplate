{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":";;;;;;;;;IACA,qBAA6B,QAAQ,CAAC,CAAA;IAEtC;;;;;;OAMG;IACH,qBAA4B,QAAkC,EAAE,KAAc;QAC7E,IAAI,OAAO,GAAkB,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEzD,MAAM,CAAC,mBAAY,CAAC;YACnB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,YAAY,CAAC,OAAO,CAAC,CAAC;gBACtB,OAAO,GAAG,IAAI,CAAC;YAChB,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IATe,mBAAW,cAS1B,CAAA;IAED;;;;;;OAMG;IACH,kBAAwE,QAAW,EAAE,KAAa;QACjG,6FAA6F;QAC7F,uCAAuC;QACvC,IAAI,KAAU,CAAC;QAEf,MAAM,CAAK;YACV,KAAK,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;YAE7B,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,IAAI,GAAsB,SAAS,CAAC;YAExC,KAAK,GAAG,UAAU,CAAC;gBAClB,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC9B,IAAI,GAAG,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC;YAC/B,CAAC,EAAE,KAAK,CAAC,CAAC;QACX,CAAC,CAAC;IACH,CAAC;IAhBe,gBAAQ,WAgBvB,CAAA;IAED;;;;;;OAMG;IACH,kBAAwE,QAAW,EAAE,KAAa;QACjG,IAAI,GAAmB,CAAC;QAExB,MAAM,CAAK;YACV,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC;YACR,CAAC;YAED,GAAG,GAAG,IAAI,CAAC;YAEX,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAChC,UAAU,CAAC;gBACV,GAAG,GAAG,IAAI,CAAC;YACZ,CAAC,EAAE,KAAK,CAAC,CAAC;QACX,CAAC,CAAC;IACH,CAAC;IAfe,gBAAQ,WAevB,CAAA;IAED;;;;;;;OAOG;IACH,uBAA6E,QAAW,EAAE,KAAa;QACtG,IAAI,GAAmB,CAAC;QAExB,MAAM,CAAK;YACV,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC;YACR,CAAC;YAED,GAAG,GAAG,IAAI,CAAC;YAEX,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,IAAI,GAAsB,SAAS,CAAC;YAExC,UAAU,CAAC;gBACV,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC9B,IAAI,GAAG,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC;YAC7B,CAAC,EAAE,KAAK,CAAC,CAAC;QACX,CAAC,CAAC;IACH,CAAC;IAlBe,qBAAa,gBAkB5B,CAAA","sourcesContent":["import { Handle } from './interfaces';\nimport { createHandle } from './lang';\n\n/**\n * Wraps a setTimeout call in a handle, allowing the timeout to be cleared by calling destroy.\n *\n * @param callback Callback to be called when the timeout elapses\n * @param delay Number of milliseconds to wait before calling the callback\n * @return Handle which can be destroyed to clear the timeout\n */\nexport function createTimer(callback: (...args: any[]) => void, delay?: number): Handle {\n\tlet timerId: number | null = setTimeout(callback, delay);\n\n\treturn createHandle(function () {\n\t\tif (timerId) {\n\t\t\tclearTimeout(timerId);\n\t\t\ttimerId = null;\n\t\t}\n\t});\n}\n\n/**\n * Wraps a callback, returning a function which fires after no further calls are received over a set interval.\n *\n * @param callback Callback to wrap\n * @param delay Number of milliseconds to wait after any invocations before calling the original callback\n * @return Debounced function\n */\nexport function debounce<T extends (this: any, ...args: any[]) => void>(callback: T, delay: number): T {\n\t// node.d.ts clobbers setTimeout/clearTimeout with versions that return/receive NodeJS.Timer,\n\t// but browsers return/receive a number\n\tlet timer: any;\n\n\treturn <T> function () {\n\t\ttimer && clearTimeout(timer);\n\n\t\tlet context = this;\n\t\tlet args: IArguments | null = arguments;\n\n\t\ttimer = setTimeout(function () {\n\t\t\tcallback.apply(context, args);\n\t\t\targs = context = timer = null;\n\t\t}, delay);\n\t};\n}\n\n/**\n * Wraps a callback, returning a function which fires at most once per set interval.\n *\n * @param callback Callback to wrap\n * @param delay Number of milliseconds to wait before allowing the original callback to be called again\n * @return Throttled function\n */\nexport function throttle<T extends (this: any, ...args: any[]) => void>(callback: T, delay: number): T {\n\tlet ran: boolean | null;\n\n\treturn <T> function () {\n\t\tif (ran) {\n\t\t\treturn;\n\t\t}\n\n\t\tran = true;\n\n\t\tcallback.apply(this, arguments);\n\t\tsetTimeout(function () {\n\t\t\tran = null;\n\t\t}, delay);\n\t};\n}\n\n/**\n * Like throttle, but calls the callback at the end of each interval rather than the beginning.\n * Useful for e.g. resize or scroll events, when debounce would appear unresponsive.\n *\n * @param callback Callback to wrap\n * @param delay Number of milliseconds to wait before calling the original callback and allowing it to be called again\n * @return Throttled function\n */\nexport function throttleAfter<T extends (this: any, ...args: any[]) => void>(callback: T, delay: number): T {\n\tlet ran: boolean | null;\n\n\treturn <T> function () {\n\t\tif (ran) {\n\t\t\treturn;\n\t\t}\n\n\t\tran = true;\n\n\t\tlet context = this;\n\t\tlet args: IArguments | null = arguments;\n\n\t\tsetTimeout(function () {\n\t\t\tcallback.apply(context, args);\n\t\t\targs = context = ran = null;\n\t\t}, delay);\n\t};\n}\n"]}