{"version":3,"file":"request.js","sourceRoot":"","sources":["../../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise from 'dojo-shim/Promise';\nimport Task from './async/Task';\nimport has from './request/has';\nimport { Handle } from './interfaces';\nimport Registry, { Test } from './Registry';\nimport load from './load';\nimport { ParamList } from './UrlSearchParams';\n\ndeclare var require: any;\n\nexport class FilterRegistry extends Registry<RequestFilter> {\n\tregister(test: string | RegExp | RequestFilterTest | null, value: RequestFilter, first?: boolean): Handle {\n\t\tlet entryTest: Test;\n\t\tconst inTest = test;\n\n\t\tif (typeof inTest === 'string') {\n\t\t\tentryTest = (response, url, options) => {\n\t\t\t\treturn inTest === url;\n\t\t\t};\n\t\t}\n\t\telse if (inTest instanceof RegExp) {\n\t\t\tentryTest = (response, url, options) => {\n\t\t\t\treturn inTest.test(url);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tentryTest = <RequestFilterTest> inTest;\n\t\t}\n\n\t\treturn super.register(entryTest, value, first);\n\t}\n}\n\nlet defaultProvider = './request/xhr';\nif (has('host-node')) {\n\tdefaultProvider = './request/node';\n}\n\nexport class ProviderRegistry extends Registry<RequestProvider> {\n\tprivate _providerPromise: Promise<RequestProvider>;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst deferRequest = (url: string, options?: RequestOptions): ResponsePromise<any> => {\n\t\t\tlet canceled = false;\n\t\t\tlet actualResponse: ResponsePromise<any>;\n\t\t\treturn new Task<Response<any>>((resolve, reject) => {\n\t\t\t\tthis._providerPromise.then(function (provider) {\n\t\t\t\t\tif (canceled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\tactualResponse = provider(url, options);\n\t\t\t\t\t\tactualResponse.then(resolve, reject);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, function () {\n\t\t\t\tif (!canceled) {\n\t\t\t\t\tcanceled = true;\n\t\t\t\t}\n\t\t\t\tif (actualResponse) {\n\t\t\t\t\tactualResponse.cancel();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// The first request to hit the default value will kick off the import of the default\n\t\t// provider. While that import is in-flight, subsequent requests will queue up while\n\t\t// waiting for the provider to be fulfilled.\n\t\tthis._defaultValue = (url: string, options?: RequestOptions): ResponsePromise<any> => {\n\t\t\tthis._providerPromise = load(require, defaultProvider).then(([ providerModule ]: [ { default: RequestProvider } ]): RequestProvider => {\n\t\t\t\tthis._defaultValue = providerModule.default;\n\t\t\t\treturn providerModule.default;\n\t\t\t});\n\t\t\tthis._defaultValue = deferRequest;\n\t\t\treturn deferRequest(url, options);\n\t\t};\n\t}\n\n\tregister(test: string | RegExp | RequestProviderTest | null, value: RequestProvider, first?: boolean): Handle {\n\t\tlet entryTest: Test;\n\n\t\tif (typeof test === 'string') {\n\t\t\tentryTest = (url, options) => {\n\t\t\t\treturn test === url;\n\t\t\t};\n\t\t}\n\t\telse if (test instanceof RegExp) {\n\t\t\tentryTest = (url, options) => {\n\t\t\t\treturn test ? (<RegExp> test).test(url) : null;\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tentryTest = <RequestProviderTest> test;\n\t\t}\n\n\t\treturn super.register(entryTest, value, first);\n\t}\n}\n\n/**\n * Request filters, which filter or modify responses. The default filter simply passes a response through unchanged.\n */\nexport const filterRegistry = new FilterRegistry(function (response: Response<any>): Response<any> {\n\treturn response;\n});\n\n/**\n * Request providers, which fulfill requests.\n */\nexport const providerRegistry = new ProviderRegistry();\n\nexport interface RequestError<T> extends Error {\n\tresponse: Response<T>;\n}\n\nexport interface RequestFilter {\n\t<T>(response: Response<T>, url: string, options?: RequestOptions): T;\n}\n\nexport interface RequestFilterTest extends Test {\n\t<T>(response: Response<any>, url: string, options?: RequestOptions): boolean | null;\n}\n\nexport interface RequestOptions {\n\tauth?: string;\n\tcacheBust?: any;\n\tdata?: any;\n\theaders?: { [name: string]: string; };\n\tmethod?: string;\n\tpassword?: string;\n\tquery?: string | ParamList;\n\tresponseType?: string;\n\ttimeout?: number;\n\tuser?: string;\n}\n\nexport interface RequestProvider {\n\t<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n}\n\nexport interface RequestProviderTest extends Test {\n\t(url: string, options?: RequestOptions): boolean | null;\n}\n\nexport interface Response<T> {\n\tdata: T | null;\n\tnativeResponse?: any;\n\trequestOptions: RequestOptions;\n\tstatusCode: number | null | undefined;\n\tstatusText?: string | null;\n\turl: string;\n\n\tgetHeader(name: string): null | string;\n}\n\n/**\n * The task returned by a request, which will resolve to a Response\n */\nexport interface ResponsePromise<T> extends Task<Response<T>> {}\n\n/**\n * Make a request, returning a Promise that will resolve or reject when the request completes.\n */\nconst request: {\n\t<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tdelete<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tget<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tpost<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tput<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n} = <any> function request<T>(url: string, options: RequestOptions = {}): ResponsePromise<T> {\n\tconst promise = providerRegistry.match(url, options)(url, options)\n\t\t.then(function (response: Response<T>) {\n\t\t\treturn Task.resolve(filterRegistry.match(response, url, options)(response, url, options))\n\t\t\t\t.then(function (filterResponse: any) {\n\t\t\t\t\tresponse.data = filterResponse.data;\n\t\t\t\t\treturn response;\n\t\t\t\t});\n\t\t});\n\n\treturn promise;\n};\n\n[ 'DELETE', 'GET', 'POST', 'PUT' ].forEach(function (method) {\n\t(<any> request)[method.toLowerCase()] = function <T>(url: string, options: RequestOptions = {}): ResponsePromise<T> {\n\t\toptions = Object.create(options);\n\t\toptions.method = method;\n\t\treturn request(url, options);\n\t};\n});\n\nexport default request;\n\n/**\n * Add a filter that automatically parses incoming JSON responses.\n */\nfilterRegistry.register(\n\tfunction (response: Response<any>, url: string, options: RequestOptions): boolean {\n\t\treturn Boolean(typeof response.data && options && options.responseType === 'json');\n\t},\n\tfunction (response: Response<any>, url: string, options: RequestOptions): Object {\n\t\treturn {\n\t\t\tdata: JSON.parse(String(response.data))\n\t\t};\n\t}\n);\n"]}